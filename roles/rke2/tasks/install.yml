---
# Check port 80(HTTP) is closed, not used by any other service
- name: Check port 80 is closed
  ansible.builtin.wait_for:
    host:  128.84.155.135
    port: 80
    state: stopped
    delay: 0
    timeout: 10
  ignore_errors: true
  register: port_result

# - name: Display the result
#   debug:
#    var: port_result

# prep Ubuntu to support RKE2-for-Aether

- name: set fs.file-max to 2097152
  ansible.posix.sysctl:
    name: fs.file-max
    value: '2097152'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: set fs.inotify.max_user_watches to 524288
  ansible.posix.sysctl:
    name: fs.inotify.max_user_watches
    value: '524288'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: set fs.inotify.max_user_instances to 512
  ansible.posix.sysctl:
    name: fs.inotify.max_user_instances
    value: '512'
    sysctl_set: true
    reload: true
  when: inventory_hostname in groups['master_nodes']
  become: true

# install RKE2-for-Aether

- set_fact:
    script_dir: /tmp/rke2

# - name: flush iptables rules
#   iptables:
#     chain: "{{ item }}"
#     flush: yes
#   with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]
#   become: true

# - name: flush iptables nat rules
#   ansible.builtin.iptables:
#     table: nat
#     chain: '{{ item }}'
#     flush: yes
#   with_items: [ 'INPUT', 'OUTPUT', 'PREROUTING', 'POSTROUTING' ]
#   become: true

- name: remove {{ script_dir }}
  file:
    path: "{{ script_dir }}"
    state: absent

- name: create {{ script_dir }}
  file:
    path: "{{ script_dir }}"
    state: directory

- name: download rke2
  get_url:
    url: https://get.rke2.io
    validate_certs: false
    dest: "{{ script_dir }}/install.sh"
    mode: "a+x"

- name: create /etc/rancher/rke2
  file:
    path: "/etc/rancher/rke2"
    state: directory
  become: true

- name: install rke2 on masters
  shell: "{{ script_dir }}/install.sh"
  environment:
    INSTALL_RKE2_VERSION: "{{ k8s.rke2.version }}"
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: enable rke2-server on masters
  systemd:
    name: rke2-server
    enabled: true
  when: inventory_hostname in groups['master_nodes']
  become: true

# TODO: fix multi-master issue (tls-san)
- name: copy master-config.yaml to /etc/rancher/rke2/config.yaml
  template:
    src: roles/rke2/templates/master-config.yaml
    dest: /etc/rancher/rke2/config.yaml
  when: inventory_hostname in groups['master_nodes']
  become: true

# - name: remove (localhost)/tmp/master-params.yaml
#   file:
#     path: "/tmp/master-params.yaml"
#     state: absent
#   when: inventory_hostname in groups['master_nodes']
#   delegate_to: localhost

# # TODO: add check for ke2.config.params_file.* existence
# - name: copy {{ ROOT_DIR }}/{{ k8s.rke2.config.params_file.master }} to (localhost)/tmp/master-params.yaml
#   template: 
#     src: "{{ ROOT_DIR }}/{{ k8s.rke2.config.params_file.master }}" 
#     dest: /tmp/master-params.yaml
#   when: inventory_hostname in groups['master_nodes']
#   delegate_to: localhost
#   ignore_errors: yes

# - name: append (localhost)/tmp/master-params.yaml to /etc/rancher/rke2/config.yaml
#   lineinfile: 
#     path: /etc/rancher/rke2/config.yaml 
#     line: "{{lookup('file', '/tmp/master-params.yaml')}}"
#     create: yes
#     state: present
#   when: inventory_hostname in groups['master_nodes']
#   become: true
#   ignore_errors: yes

- name: start rke2-server on masters
  systemd:
    name: rke2-server
    state: started
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: waiting for the master nodes to get ready 
  shell: |
    /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml wait nodes --for=condition=Ready --all --timeout=300s
    /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml wait deployment -n kube-system --for=condition=available --all --timeout=300s
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['master_nodes']
  become: true

- pause:
    seconds: 5

- name: install rke2 agent on workers
  shell: "{{ script_dir }}/install.sh"
  environment:
    INSTALL_RKE2_VERSION: "{{ k8s.rke2.version }}"
    INSTALL_RKE2_TYPE: "agent"
  when: inventory_hostname in groups['worker_nodes']
  become: true

- name: enable rke2-agent on workers
  systemd:
    name: rke2-agent
    enabled: true
  when: inventory_hostname in groups['worker_nodes']
  become: true

- name: copy worker-config.yaml to /etc/rancher/rke2/config.yaml
  template:
    src: roles/rke2/templates/worker-config.yaml
    dest: /etc/rancher/rke2/config.yaml
  when: inventory_hostname in groups['worker_nodes']
  become: true

# - name: remove (localhost)/tmp/worker-params.yaml
#   file:
#     path: "/tmp/worker-params.yaml"
#     state: absent
#   when: inventory_hostname in groups['worker_nodes']
#   delegate_to: localhost

# # TODO: add check for ke2.config.params_file.* existence
# - name: copy {{ ROOT_DIR }}/{{ k8s.rke2.config.params_file.worker }} to (localhost)/tmp/worker-params.yaml
#   template: 
#     src: "{{ ROOT_DIR }}/{{ k8s.rke2.config.params_file.worker }}" 
#     dest: /tmp/worker-params.yaml
#   when: inventory_hostname in groups['worker_nodes']
#   delegate_to: localhost
#   ignore_errors: yes

# - name: append (localhost)/tmp/worker-params.yaml to /etc/rancher/rke2/config.yaml
#   lineinfile: 
#     path: /etc/rancher/rke2/config.yaml 
#     line: "{{lookup('file', '/tmp/worker-params.yaml')}}"
#     create: yes
#     state: present
#   when: inventory_hostname in groups['worker_nodes']
#   become: true
#   ignore_errors: yes

- name: start rke2-agent on workers (sequentially)
  systemd:
    name: rke2-agent
    state: started
  throttle: 1
  when: inventory_hostname in groups['worker_nodes']
  become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['worker_nodes']
  become: true

- name: download kubectl
  get_url:
    url: https://dl.k8s.io/release/{{ k8s.kubectl.version }}/bin/linux/amd64/kubectl
    validate_certs: false
    dest: "/usr/local/bin/kubectl"
    mode: "a+x"
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: create {{ ansible_env.HOME }}/.kube
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
  when: inventory_hostname in groups['master_nodes']

- name: copy /etc/rancher/rke2/rke2.yaml {{ ansible_env.HOME }}/.kube/config
  copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
  when: inventory_hostname in groups['master_nodes']
  become: true

- name: change {{ ansible_env.HOME }}/.kube ownership
  shell: |
    chown -R $(shell id -u):$(shell id -g) {{ ansible_env.HOME }}/.kube
  when: inventory_hostname in groups['master_nodes']
  become: true
